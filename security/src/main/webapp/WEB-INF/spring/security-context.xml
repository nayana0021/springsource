<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		인증 : 현재 사용자가 누구인지 확인하는 과정
			  아이디/암호를 이용해서 인증을 주로 처리(폼 로그인 방식)
			  
	 -->
	 
	 <bean id="customLoginSuccessHandler" class="com.spring.handler.CustomLoginSuccessHandler"></bean>

	<security:http>
	<!-- 폼 로그인 인증 방식을 선택 -->  <!-- login-page 옵션을 줄 수 있다(디폴트 값) 원래는 /login 이다 -->
		<security:form-login login-page="/security/login" authentication-failure-url="/security/login-error" 
				authentication-success-handler-ref="customLoginSuccessHandler"/> <!-- 로그인 방식을 폼로그인 방식으로 처리할거야/로그인 실패시 url지정/로그인 성공 후 경로 지정 -->
		<security:logout invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/> <!-- 세션이 날라감/심어놓은 쿠키 제거 -->
		<security:intercept-url pattern="/security/userpage" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/security/adminpage" access="hasRole('ROLE_ADMIN')"/>
	</security:http>

	<!-- 비밀번호는 무조건 암호화 상태여야 함 : {noop} => 암호화 하지 말기 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="user1" password="{noop}user1" authorities="ROLE_USER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_USER,ROLE_ADMIN"/><!-- 여러개 부여 가능 -->
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>






